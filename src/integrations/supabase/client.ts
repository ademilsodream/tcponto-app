
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://cyapqtyrefkdemhxryvs.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN5YXBxdHlyZWZrZGVtaHhyeXZzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgyNjM3OTAsImV4cCI6MjA2MzgzOTc5MH0.E-Okftoiz6Le5jOuq6PwF030O0eNIuvBbf2cvF1kVs8";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    // Configurações otimizadas para evitar travamentos
    flowType: 'pkce',
    debug: false,
    storageKey: 'sb-tcponto-auth-token',
    // Configurar timeouts para evitar hanging requests
    exchangeCodeForSessionTimeout: 30000,
  },
  realtime: {
    // Otimizar configurações de realtime
    heartbeatIntervalMs: 30000,
    reconnectAfterMs: (tries) => Math.min(tries * 1000, 30000),
  },
  global: {
    headers: {
      'x-application-name': 'tcponto-system',
    },
  },
});

// Sistema de health check para detectar sessões travadas
let lastHealthCheck = Date.now();
let isSessionHealthy = true;

export const checkSessionHealth = async (): Promise<boolean> => {
  try {
    const now = Date.now();
    
    // Verificar se já passou muito tempo desde a última verificação
    if (now - lastHealthCheck > 300000) { // 5 minutos
      console.log('Supabase Health Check: Verificando status da sessão...');
      
      const { data: { session }, error } = await supabase.auth.getSession();
      
      if (error) {
        console.error('Supabase Health Check: Erro ao verificar sessão:', error);
        isSessionHealthy = false;
        return false;
      }
      
      if (session) {
        // Verificar se o token não está próximo do vencimento
        const tokenExp = session.expires_at;
        const timeUntilExpiry = tokenExp ? (tokenExp * 1000) - now : 0;
        
        if (timeUntilExpiry < 300000) { // Menos de 5 minutos para expirar
          console.log('Supabase Health Check: Token próximo do vencimento, forçando refresh...');
          const { error: refreshError } = await supabase.auth.refreshSession();
          if (refreshError) {
            console.error('Supabase Health Check: Erro ao renovar sessão:', refreshError);
            isSessionHealthy = false;
            return false;
          }
        }
      }
      
      lastHealthCheck = now;
      isSessionHealthy = true;
      console.log('Supabase Health Check: Sessão saudável');
    }
    
    return isSessionHealthy;
  } catch (error) {
    console.error('Supabase Health Check: Erro inesperado:', error);
    isSessionHealthy = false;
    return false;
  }
};

// Auto health check a cada 2 minutos
setInterval(checkSessionHealth, 120000);
